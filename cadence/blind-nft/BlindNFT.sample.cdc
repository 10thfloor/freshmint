import NonFungibleToken from 0xf8d6e0586b0a20c7
import MetadataViews from 0xf8d6e0586b0a20c7
import FungibleToken from 0xee82856bf20e2aa6
import FreshmintMetadataViews from 0xf8d6e0586b0a20c7

pub contract BlindNFTSample: NonFungibleToken {

    pub let version: String

    // Events
    //
    pub event ContractInitialized()
    pub event Withdraw(id: UInt64, from: Address?)
    pub event Deposit(id: UInt64, to: Address?)
    pub event Minted(id: UInt64)
    pub event Revealed(id: UInt64)
    pub event Burned(id: UInt64)

    // Named Paths
    //
    pub let CollectionStoragePath: StoragePath
    pub let CollectionPublicPath: PublicPath
    pub let CollectionPrivatePath: PrivatePath
    pub let AdminStoragePath: StoragePath

    // totalSupply
    // The total number of BlindNFTSample NFTS that have been minted
    //
    pub var totalSupply: UInt64

    // A placeholder image used to display NFTs that have not
    // yet been revealed.
    pub let placeholderImage: String

    pub struct Metadata {

        // A salt that is published when the metadata is revealed.
        //
        // The salt is a byte array that is prepended to the 
        // encoded metadata values before generating the metadata hash.
        pub let metadataSalt: [UInt8]

        pub let name: String
        pub let description: String
        pub let thumbnail: String

        init(
            metadataSalt: [UInt8],
            name: String,
            description: String,
            thumbnail: String,
        ) {
            self.metadataSalt = metadataSalt

            self.name = name
            self.description = description
            self.thumbnail = thumbnail
        }

        // Encode this metadata object as a byte array.
        //
        // This can be used to hash the metadata and verify its integrity.
        pub fun encode(): [UInt8] {
            return self.metadataSalt
                .concat(self.name.utf8)
                .concat(self.description.utf8)
                .concat(self.thumbnail.utf8)
        }

        pub fun hash(): [UInt8] {
            return HashAlgorithm.SHA3_256.hash(self.encode())
        }
    }

    access(contract) let metadata: {UInt64: Metadata}

    pub resource NFT: NonFungibleToken.INFT {

        pub let id: UInt64

        // A hash of the NFT's metadata.
        //
        // The metadata hash is known at mint time and 
        // is generated by hashing the set of metadata fields
        // for this NFT. The hash can later be used to verify
        // that the correct metadata fields are revealed.
        pub let metadataHash: [UInt8]

        init(
            id: UInt64,
            metadataHash: [UInt8]
        ) {
            self.id = id
            self.metadataHash = metadataHash
        }

        // Return the metadata for this NFT.
        //
        // This function returns nil if the NFT metadata has
        // not yet been revealed.
        pub fun getMetadata(): Metadata? {
            return BlindNFTSample.metadata[self.id]
        }

        pub fun getViews(): [Type] {
            if self.getMetadata() != nil {
                return [
                    Type<MetadataViews.Display>()
                ]
            }

            return [
                Type<MetadataViews.Display>(),
                Type<FreshmintMetadataViews.BlindNFT>()
            ]
        }

        pub fun resolveView(_ view: Type): AnyStruct? {
            if let metadata = self.getMetadata() {
                switch view {
                    case Type<MetadataViews.Display>():
                        return MetadataViews.Display(
                            name: metadata.name,
                            description: metadata.description,
                            thumbnail: MetadataViews.IPFSFile(cid: metadata.thumbnail, path: nil)
                        
                        )
                }

                return nil
            }

            switch view {
                case Type<MetadataViews.Display>():
                    return MetadataViews.Display(
                        name: "BlindNFTSample",
                        description: "This NFT is not yet revealed.",
                        thumbnail: MetadataViews.IPFSFile(
                            cid: BlindNFTSample.placeholderImage, 
                            path: nil
                        )
                    )
                case Type<FreshmintMetadataViews.BlindNFT>():
                    return FreshmintMetadataViews.BlindNFT(metadataHash: self.metadataHash)
            }

            return nil
        }

        destroy() {
            emit Burned(id: self.id)
        }
    }

    pub resource interface BlindNFTSampleCollectionPublic {
        pub fun deposit(token: @NonFungibleToken.NFT)
        pub fun getIDs(): [UInt64]
        pub fun borrowNFT(id: UInt64): &NonFungibleToken.NFT
        pub fun borrowBlindNFTSample(id: UInt64): &BlindNFTSample.NFT? {
            post {
                (result == nil) || (result?.id == id):
                    "Cannot borrow BlindNFTSample reference: The ID of the returned reference is incorrect"
            }
        }
    }

    pub resource Collection: BlindNFTSampleCollectionPublic, NonFungibleToken.Provider, NonFungibleToken.Receiver, NonFungibleToken.CollectionPublic {
        
        // dictionary of NFTs
        // NFT is a resource type with an `UInt64` ID field
        //
        pub var ownedNFTs: @{UInt64: NonFungibleToken.NFT}

        // withdraw
        // Removes an NFT from the collection and moves it to the caller
        //
        pub fun withdraw(withdrawID: UInt64): @NonFungibleToken.NFT {
            let token <- self.ownedNFTs.remove(key: withdrawID) ?? panic("missing NFT")

            emit Withdraw(id: token.id, from: self.owner?.address)

            return <- token
        }

        // deposit
        // Takes a NFT and adds it to the collections dictionary
        // and adds the ID to the id array
        //
        pub fun deposit(token: @NonFungibleToken.NFT) {
            let token <- token as! @BlindNFTSample.NFT

            let id: UInt64 = token.id

            // add the new token to the dictionary which removes the old one
            let oldToken <- self.ownedNFTs[id] <- token

            emit Deposit(id: id, to: self.owner?.address)

            destroy oldToken
        }

        // getIDs
        // Returns an array of the IDs that are in the collection
        //
        pub fun getIDs(): [UInt64] {
            return self.ownedNFTs.keys
        }

        // borrowNFT
        // Gets a reference to an NFT in the collection
        // so that the caller can read its metadata and call its methods
        //
        pub fun borrowNFT(id: UInt64): &NonFungibleToken.NFT {
            return (&self.ownedNFTs[id] as &NonFungibleToken.NFT?)!
        }

        // borrowBlindNFTSample
        // Gets a reference to an NFT in the collection as a BlindNFTSample.
        //
        pub fun borrowBlindNFTSample(id: UInt64): &BlindNFTSample.NFT? {
            if self.ownedNFTs[id] != nil {
                let ref = (&self.ownedNFTs[id] as auth &NonFungibleToken.NFT?)!
                return ref as! &BlindNFTSample.NFT
            }

            return nil
        }

        // destructor
        destroy() {
            destroy self.ownedNFTs
        }

        // initializer
        //
        init () {
            self.ownedNFTs <- {}
        }
    }

    // createEmptyCollection
    // public function that anyone can call to create a new empty collection
    //
    pub fun createEmptyCollection(): @NonFungibleToken.Collection {
        return <- create Collection()
    }

    // Admin
    // Resource that an admin can use to mint NFTs.
    //
    pub resource Admin {

        // mintNFT
        // Mints a new NFT with a new ID
        //
        pub fun mintNFT(metadataHash: [UInt8]): @BlindNFTSample.NFT {
            let nft <- create BlindNFTSample.NFT(
                id: BlindNFTSample.totalSupply,
                metadataHash: metadataHash,
            )

            emit Minted(id: nft.id)

            BlindNFTSample.totalSupply = BlindNFTSample.totalSupply + (1 as UInt64)

            return <- nft
        }

        pub fun revealNFT(id: UInt64, metadata: Metadata) {
            pre {
                BlindNFTSample.metadata[id] == nil : "NFT has already been revealed"
            }

            BlindNFTSample.metadata[id] = metadata

            emit Revealed(id: id)
        }
    }

    pub fun getCollectionPublicPath(collectionName: String?): PublicPath {
        if let name = collectionName {
            return PublicPath(identifier: "BlindNFTSampleCollection_".concat(name))!
        }

        return /public/BlindNFTSampleCollection
    }

    pub fun getCollectionPrivatePath(collectionName: String?): PrivatePath {
        if let name = collectionName {
            return PrivatePath(identifier: "BlindNFTSampleCollection_".concat(name))!
        }

        return /private/BlindNFTSampleCollection
    }

    pub fun getCollectionStoragePath(collectionName: String?): StoragePath {
        if let name = collectionName {
            return StoragePath(identifier: "BlindNFTSampleCollection_".concat(name))!
        }

        return /storage/BlindNFTSampleCollection
    }

    priv fun initAdmin(admin: AuthAccount) {
        // Create an empty collection and save it to storage
        let collection <- BlindNFTSample.createEmptyCollection()
        
        admin.save(<- collection, to: BlindNFTSample.CollectionStoragePath)

        admin.link<&BlindNFTSample.Collection>(BlindNFTSample.CollectionPrivatePath, target: BlindNFTSample.CollectionStoragePath)
        admin.link<&BlindNFTSample.Collection{NonFungibleToken.CollectionPublic, BlindNFTSample.BlindNFTSampleCollectionPublic}>(BlindNFTSample.CollectionPublicPath, target: BlindNFTSample.CollectionStoragePath)
        
        // Create an admin resource and save it to storage
        let adminResource <- create Admin()

        admin.save(<- adminResource, to: self.AdminStoragePath)
    }

    init(admin: AuthAccount, placeholderImage: String) {

        self.version = "0.0.17-alpha.2"

        self.CollectionPublicPath = BlindNFTSample.getCollectionPublicPath(collectionName: nil)
        self.CollectionStoragePath = BlindNFTSample.getCollectionStoragePath(collectionName: nil)
        self.CollectionPrivatePath = BlindNFTSample.getCollectionPrivatePath(collectionName: nil)

        self.AdminStoragePath = /storage/BlindNFTSampleAdmin

        self.placeholderImage = placeholderImage

        // Initialize the total supply
        self.totalSupply = 0

        self.metadata = {}

        self.initAdmin(admin: admin)

        emit ContractInitialized()
    }
}
