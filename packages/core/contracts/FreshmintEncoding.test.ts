// @ts-ignore
import * as t from '@onflow/types';
import { CadenceType } from '../cadence/values';

import { client, setupEmulator, teardownEmulator } from '../testHelpers';
import { FreshmintEncodingContract } from './FreshmintEncoding';

describe('FreshmintEncoding', () => {
  beforeAll(setupEmulator);
  afterAll(teardownEmulator);

  // Test cases from Cadence interpreter:
  // https://github.com/onflow/cadence/blob/3db71b8364aee60a83dd53d8a99e935a0e5c8b78/values_test.go#L287-L442
  const cases: { type: CadenceType; toBytes: [string, number[]][] }[] = [
    {
      type: t.Int,
      toBytes: [
        ['0', [0, 1, 0]],
        ['42', [0, 1, 42]],
        ['127', [0, 1, 127]],
        ['128', [0, 2, 0, 128]],
        ['200', [0, 2, 0, 200]],
        ['-1', [0, 1, 255]],
        ['-200', [0, 2, 255, 56]],
        ['-12341255', [0, 4, 255, 67, 175, 249]],
        ['-10000000000000000', [0, 7, 220, 121, 13, 144, 63, 0, 0]],
      ],
    },
    {
      type: t.Int8,
      toBytes: [
        ['0', [0]],
        ['42', [42]],
        ['127', [127]],
        ['-1', [255]],
        ['-127', [129]],
        ['-128', [128]],
      ],
    },
    {
      type: t.Int16,
      toBytes: [
        ['0', [0, 0]],
        ['42', [0, 42]],
        ['32767', [127, 255]],
        ['-1', [255, 255]],
        ['-32767', [128, 1]],
        ['-32768', [128, 0]],
      ],
    },
    {
      type: t.Int32,
      toBytes: [
        ['0', [0, 0, 0, 0]],
        ['42', [0, 0, 0, 42]],
        ['2147483647', [127, 255, 255, 255]],
        ['-1', [255, 255, 255, 255]],
        ['-2147483647', [128, 0, 0, 1]],
        ['-2147483648', [128, 0, 0, 0]],
      ],
    },
    {
      type: t.Int64,
      toBytes: [
        ['0', [0, 0, 0, 0, 0, 0, 0, 0]],
        ['42', [0, 0, 0, 0, 0, 0, 0, 42]],
        ['9223372036854775807', [127, 255, 255, 255, 255, 255, 255, 255]],
        ['-1', [255, 255, 255, 255, 255, 255, 255, 255]],
        ['-9223372036854775807', [128, 0, 0, 0, 0, 0, 0, 1]],
        ['-9223372036854775808', [128, 0, 0, 0, 0, 0, 0, 0]],
      ],
    },
    {
      type: t.UInt,
      toBytes: [
        ['0', [0, 1, 0]],
        ['42', [0, 1, 42]],
        ['127', [0, 1, 127]],
        ['128', [0, 1, 128]],
        ['200', [0, 1, 200]],
      ],
    },
    {
      type: t.UInt8,
      toBytes: [
        ['0', [0]],
        ['42', [42]],
        ['127', [127]],
        ['128', [128]],
        ['255', [255]],
      ],
    },
    {
      type: t.UInt16,
      toBytes: [
        ['0', [0, 0]],
        ['42', [0, 42]],
        ['32767', [127, 255]],
        ['32768', [128, 0]],
        ['65535', [255, 255]],
      ],
    },
    {
      type: t.UInt32,
      toBytes: [
        ['0', [0, 0, 0, 0]],
        ['42', [0, 0, 0, 42]],
        ['2147483647', [127, 255, 255, 255]],
        ['2147483648', [128, 0, 0, 0]],
        ['4294967295', [255, 255, 255, 255]],
      ],
    },
    {
      type: t.UInt64,
      toBytes: [
        ['0', [0, 0, 0, 0, 0, 0, 0, 0]],
        ['42', [0, 0, 0, 0, 0, 0, 0, 42]],
        ['9223372036854775807', [127, 255, 255, 255, 255, 255, 255, 255]],
        ['9223372036854775808', [128, 0, 0, 0, 0, 0, 0, 0]],
        ['18446744073709551615', [255, 255, 255, 255, 255, 255, 255, 255]],
      ],
    },
    {
      type: t.Fix64,
      toBytes: [
        ['0.0', [0, 0, 0, 0, 0, 0, 0, 0]],
        ['42.0', [0, 0, 0, 0, 250, 86, 234, 0]],
        ['42.24', [0, 0, 0, 0, 251, 197, 32, 0]],
        ['-1.0', [255, 255, 255, 255, 250, 10, 31, 0]],
      ],
    },
    {
      type: t.UFix64,
      toBytes: [
        ['0.0', [0, 0, 0, 0, 0, 0, 0, 0]],
        ['42.0', [0, 0, 0, 0, 250, 86, 234, 0]],
        ['42.24', [0, 0, 0, 0, 251, 197, 32, 0]],
      ],
    },
    {
      type: t.String,
      toBytes: [
        ['', [0, 0]],
        [' ', [0, 1, 32]],
        ['foo', [0, 3, 102, 111, 111]],
        [' foo ', [0, 5, 32, 102, 111, 111, 32]],
      ],
    },
    {
      type: t.Address,
      toBytes: [
        ['0x0000000000000000', [0, 0, 0, 0, 0, 0, 0, 0]],
        ['0xf8d6e0586b0a20c7', [248, 214, 224, 88, 107, 10, 32, 199]],
      ],
    },
  ];

  const freshmintEncoding = new FreshmintEncodingContract();

  describe.each(cases)('encode$type.label', ({ type, toBytes }) => {
    test.each(toBytes)('%s', async (value, expected) => {
      const encoded = await client.query(freshmintEncoding.encode(value, type));
      expect(encoded).toEqual(Buffer.from(expected).toString('hex'));
    });
  });
});
